클래스
- 은닉성 => 파이썬에선 미지원
- 상속성
- 다형성

객체 -> 할당받은 메모리 공간

생성자 : 파일을 읽어 초기화
소멸자(없어도됨) : 내용을 파일에 저장

같은타입을 한번에 저장할 때 : 리스트가 유리

Class는 Object의 Template이고
Object는 Class의 Instance이다.


- 가전제품 판매 관리 프로그램
>> TV, 오디오, 냉장고, 세탁기 등등 판매
- 구현기능: 관리기능 -> CRUD
1. 제품구매(등록) - 재고 정보
2. 제품판매
3. 제품 재고수정
4. 단종제품 - 삭제
5. 제품정보 목록, 상세, 검색

-> 필요한 모듈(코드) : 
제품정보 - Product 클래스
제품정보관리 - ProductManager 클래스
정보 입출력(UI) - ProductUI 클래스
데이터 입출력(IO) - ProductIO 클래스

상속
속성읽을때 -> 속성검색 영역 (속성쓰기 -> 인스턴스에 저장)
인스턴스 -> 부모클래스 -> 자식클래스 -> 전역
인스턴스 변수 -> 부모의 인스턴스 변수

자식 클래스 정의시 => 클래스명 뒤에 소괄호로 부모 클래스 명시
class Student(Person):

오버라이딩 = 재정의
-> 함수 오버로딩 기능은 업음 (연산자 오버로딩은 가능)
자식 상황에 맞춰서 함수를 재정의 하는것

*모듈만들기*
재사용 하고자 하는 변수, 함수, 클래스를 파일에 저장하여 다른 파일에서 호출해서 사용하는것
-> 파일명.py

장점
- 유지보수성을 높음
- 코드를 namespace로 구분하고 관리 => 접두어 붙여 부르기

__name__ => 모듈명 출력
__name__값이 __main__인 경우에만 테스트 코드 실행, 그외엔 비활성

모듈 import 방법
- import numpy(전체이름을 써야함)
- import numpy as np (numpy를 np로 줄일수 있음)
- from numpy import random (numpy = 모듈, random = 함수, 클래스명)
- from numpy import random as rd (numpy 모듈 내의 random 모듈만 rd로 줄여서 사용)
- from numpy import * (모듈명 생략하고 함수  클래스 모두 임포트)